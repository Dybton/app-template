# Project Instructions

Use specification and guidelines as you build the app.

Write the complete code for every step. Do not get lazy.

Your goal is to completely finish whatever I ask for.

You will see <ai_context> tags in the code. These are context tags that you should use to help you understand the codebase.

## Overview

This is a web app template.

## Tech Stack

- Frontend: Next.js (Pages Router), Tailwind, Shadcn
- Backend: Next.js API Routes, MVC-Inspired Architecture
- Database: Supabase (PostgreSQL + Vector extension), Drizzle ORM
- Auth: Clerk
- Deployment: Vercel

## Project Structure

```
├── src/
│ ├── pages/ # All routes
│ │ ├── index.tsx # Home page (/)
│ │ ├── about.tsx # About page (/about)
│ │ ├── _app.tsx # Custom App component
│ │ ├── _document.tsx # Custom Document component
│ │ └── api/ # API routes directory
│ │   ├── users/
│ │   │ ├── index.ts # GET /api/users
│ │   │ └── [id].ts # GET /api/users/:id
│ │   └── auth/
│ │     └── login.ts # POST /api/auth/login
│ │
│ ├── frontend/ # Frontend-related code
│ │ ├── components/ # Reusable React components
│ │ │ ├── Toast.tsx
│ │ │ ├── Header.tsx
│ │ │ └── SomeComponent.tsx
│ │ ├── shadcn/ # ShadCN components
│ │ │ ├── components/
│ │ │ │ └── card.tsx
│ │ │ └── utils.ts
│ │ ├── hooks/ # Custom React hooks
│ │ ├── providers/ # React context providers
│ │ ├── styles/ # Frontend styles
│ │ └── utils/ # Frontend utility functions
│ │
│ ├── backend/ # Backend-related code
│ │ ├── controllers/ # Business logic for API routes
│ │ ├── db/ # Database-related code
│ │ │ ├── schema/ # Database schemas
│ │ │ └── queries/ # Queries for the db (read and write)
│ │ ├── services/ # External services integration
│ │ └── utils/ # Backend utility functions
│ │
│ └── shared-utils/ # Shared utilities for frontend and backend
│
├── middleware.ts # Global middleware
├── types.ts # Global type definitions
├── public/ # Static assets
├── next.config.js # Next.js configuration
└── package.json # Project dependencies
```

## Rules

Follow these rules when building the app.

### General Rules

- Use `@` to import anything from the app unless otherwise specified
- Use camelCase for all files and folders unless otherwise specified
- Use kebab-case for all endpoints in pages/api
- Don't update shadcn components unless otherwise specified

#### Env Rules

- Do not expose environment variables to the frontend
- Use `NEXT_PUBLIC_` prefix for environment variables that need to be accessed from the frontend
- You may import environment variables in functions and components by using `process.env.VARIABLE_NAME`

#### Type Rules

Follow these rules when working with types.

- When importing types, use `@/types`
- Name files like `ExampleTypes.ts`
- All types should go in `types.ts` in the root folder
- Make sure to export the types in `types/index.ts`
- Prefer types over interfaces
- If referring to db types, use `@/db/schema` such as `SelectTodo` from `todos-schema.ts`
- Never use any type

An example of a type:

`types.ts`

```ts
export type Source = {
  id: string;
  pages: number[];
  sourceId: string;
  text: string;
  fileName: string;
};

export type ApiResponse<T> = {
  success: boolean;
  message: string;
  data: T | null;
};
```

### Frontend Rules

Follow these rules when working on the frontend.

It uses Next.js (Pages Router), Tailwind and shadCN

#### General Rules

- Use `lucide-react` for icons
- Use TanStack React Query for data fetching, caching, and state management
- Implement REST endpoints
- useSidebar must be used within a SidebarProvider

#### Components

- Use divs instead of other html tags unless otherwise specified
- Separate the main parts of a component's html with an extra blank line for visual spacing

##### Organization

- All components be named using camelCase like `ExampleComponent.tsx` unless otherwise specified
- Put components in `frontend/components`

##### Data Fetching

- Use TanStack React Query for client-side data fetching and caching
- Fetch data in pages/api endpoints and get in the frontend using TanStack
- When fetching use the loader
- Mutate data in pages/api endpoints
- Call the mutations using TanStack
- After mutating invalidate the fetch query

Example of a TanStack query:

```tsx
const { data: projectData, error: projectError } = useQuery({
  queryKey: ["project", project, companyId],
  queryFn: async () => {
    return fetchProject(project, companyId);
  },
  enabled: !!project && !!companyId,
});

const fetchProject = async (
  projectId: string,
  companyId: string
): Promise<ApiResponse<PickedProject>> => {
  const response = await fetch(
    `/api/get-project?projectId=${projectId}&companyId=${companyId}`
  );
  if (!response.ok) {
    throw new Error(`Error: ${response.status}`);
  }
  const data = await response.json();
  return data;
};
```

Example of a TanStack mutation:

```tsx
const { mutate, isPending } = useMutation({
  mutationFn: (variables: { projectName: string; companyId: string }) =>
    createProjects(variables.projectName, variables.companyId),
  onSuccess: (response) => {
    if (response.success && response.data) {
      toast.success("Project created successfully");
      const { id, name } = response.data;
      router.push(`/tender?project=${id}&title=${encodeURIComponent(name)}`);
    }
  },
  onError: (error) => {
    console.error("Failed to create project:", error);
    toast.error("Failed to create project");
  },
});

const createProjects = async (
  projectName: string,
  companyId: string
): Promise<ApiResponse<SelectProject>> => {
  const response = await fetch(`/api/create-project`, {
    method: "POST",
    body: JSON.stringify({ projectName, companyId }),
  });
  const data = await response.json();
  return data;
};
```

### Backend Rules

Follow these rules when working on the backend.

It uses Next.js API Routes with an MVC-inspired architecture, Supabase, and Drizzle ORM.

#### General Rules

- Never generate migrations. You do not have to do anything in the `db/migrations` folder including migrations and metadata. Ignore it.
- Follow MVC-inspired architecture:
  - Model: Centralize database interactions in the `db` folder
  - Controller: Implement business logic in API routes
  - View: Use Next.js pages and components for presentation

#### Organization

#### API Routes

- Use Next.js API Routes in `pages/api`
- Name files like `example-api.ts`
- Always check the request method (`GET`, `POST`, etc.)
- Always validate request parameters
- Always use Clerk for authentication
- Always return a consistent response structure

Example of a GET API route:

```tsx
import { NextApiRequest, NextApiResponse } from "next";
import { ApiResponse } from "types";
import { getAuth } from "@clerk/nextjs/server";
import { getSources } from "@/backend/db/queries/sources";
import { SelectSource } from "@/backend/db/schema/sources-schema";

export type PickedSource = Pick<
  SelectSource,
  "id" | "name" | "url" | "description" | "createdAt"
>;

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ApiResponse<PickedSource[]>>
) {
  if (req.method !== "GET") {
    return res.status(405).json({
      success: false,
      message: "Method not allowed",
      data: null,
    });
  }

  try {
    const { projectId } = req.query;

    if (!projectId || typeof projectId !== "string") {
      return res.status(400).json({
        success: false,
        message: "Project ID is required",
        data: null,
      });
    }

    const { userId } = getAuth(req);

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: "Unauthorized",
        data: null,
      });
    }

    try {
      const sources = await getSources(projectId, userId);

      const formattedSources = sources.map((source) => ({
        id: source.id,
        name: source.name,
        url: source.url,
        description: source.description,
        createdAt: source.createdAt,
      }));

      return res.status(200).json({
        success: true,
        data: formattedSources,
        message: "Sources fetched successfully",
      });
    } catch (dbError) {
      console.error("Error fetching sources:", dbError);
      return res.status(500).json({
        success: false,
        message: "Failed to fetch sources",
        data: null,
      });
    }
  } catch (error) {
    console.error("Unexpected error:", error);
    return res.status(500).json({
      success: false,
      message: "An unexpected error occurred",
      data: null,
    });
  }
}
```

Example of a POST API route:

```tsx
import { NextApiRequest, NextApiResponse } from "next";
import { ApiResponse } from "types";
import { getAuth } from "@clerk/nextjs/server";
import { SelectProject } from "@/backend/db/schema";
import { checkUserBelongsToCompany } from "@/backend/db/queries/profiles";
import { createProject } from "@/backend/db/queries/projects";

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse<ApiResponse<SelectProject>>
) {
  if (req.method !== "POST") {
    return res.status(405).json({
      success: false,
      message: "Method not allowed",
      data: null,
    });
  }

  try {
    const body = typeof req.body === "string" ? JSON.parse(req.body) : req.body;
    const { projectName, companyId, language } = body;

    if (!projectName || !companyId) {
      return res.status(400).json({
        success: false,
        message: "Missing required arguments",
        data: null,
      });
    }

    const { userId } = getAuth(req);

    if (!userId) {
      return res.status(401).json({
        success: false,
        message: "Unauthorized",
        data: null,
      });
    }

    const user = await checkUserBelongsToCompany(userId, companyId);

    if (!user) {
      return res.status(401).json({
        success: false,
        message: "Unauthorized",
        data: null,
      });
    }

    try {
      const newProject = await createProject({
        name: projectName,
        companyId,
        type: "RFT",
        status: "in_progress",
        language: language || "en",
      });

      return res.status(201).json({
        success: true,
        data: newProject,
        message: "Project created successfully",
      });
    } catch (dbError) {
      console.error("Database error:", dbError);
      return res.status(500).json({
        success: false,
        message: "Failed to create project",
        data: null,
      });
    }
  } catch (error) {
    console.error("Error creating project:", error);
    return res.status(500).json({
      success: false,
      message: "Something went wrong",
      data: null,
    });
  }
}
```

#### Schemas

- When importing schemas, use `@/db/schema`
- Name files like `example-schema.ts`
- All schemas should go in `db/schema`
- Make sure to export the schema in `db/schema/index.ts`
- Make sure to add the schema to the `schema` object in `db/db.ts`
- If using a userId, always use `userId: text("user_id").notNull()`
- Always include createdAt and updatedAt columns in all tables
- Make sure to cascade delete when necessary
- Use enums for columns that have a limited set of possible values such as:

```ts
import { pgEnum } from "drizzle-orm/pg-core";

export const membershipEnum = pgEnum("membership", ["free", "pro"]);

membership: membershipEnum("membership").notNull().default("free"),
```

Example of a schema:

`db/schema/todos-schema.ts`

```ts
import { boolean, pgTable, text, timestamp, uuid } from "drizzle-orm/pg-core";

export const todosTable = pgTable("todos", {
  id: uuid("id").defaultRandom().primaryKey(),
  userId: text("user_id").notNull(),
  content: text("content").notNull(),
  completed: boolean("completed").default(false).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date()),
});

export type InsertTodo = typeof todosTable.$inferInsert;
export type SelectTodo = typeof todosTable.$inferSelect;
```

And exporting it:

`db/schema/index.ts`

```ts
export * from "./todos-schema";
```

And adding it to the schema in `db/db.ts`:

`db/db.ts`

```ts
import { todosTable } from "@/db/schema";

const schema = {
  todos: todosTable,
};
```

#### Queries

- When importing queries, use `@/db/queries`
- Name files like `example-queries.ts`
- All database operations should be in this directory
- Use db.select as the default query method
- Always return the first element when expecting only one result with destructuring: `const [newSource] = await db...`
- Sort in CRUD order: Create, Read, Update, Delete
- Always handle errors

Example of a query file:

`db/queries/sources.ts`

```ts
import { db } from "@/db/db";
import { sourcesTable } from "@/db/schema/sources-schema";
import { eq } from "drizzle-orm";

export const getSources = async (projectId: string, userId: string) => {
  try {
    const sources = await db
      .select()
      .from(sourcesTable)
      .where(eq(sourcesTable.projectId, projectId));

    return sources;
  } catch (error) {
    console.error("Error fetching sources:", error);
    throw new Error("Failed to fetch sources");
  }
};

export const getSource = async (sourceId: string) => {
  try {
    const [source] = await db
      .select()
      .from(sourcesTable)
      .where(eq(sourcesTable.id, sourceId));

    return source;
  } catch (error) {
    console.error("Error fetching source:", error);
    throw new Error("Failed to fetch source");
  }
};

export const createSource = async (source: Source) => {
  try {
    const [newSource] = await db
      .insert(sourcesTable)
      .values(source)
      .returning();

    return newSource;
  } catch (error) {
    console.error("Error creating source:", error);
    throw new Error("Failed to create source");
  }
};

export const updateSource = async (source: Source) => {
  if (!source.id) {
    throw new Error("Source ID is required");
  }

  const updateData = Object.fromEntries(
    Object.entries(source).filter(([_, value]) => value !== undefined)
  );

  try {
    const [updatedSource] = await db
      .update(sourcesTable)
      .set(updateData)
      .where(eq(sourcesTable.id, source.id))
      .returning();

    return updatedSource;
  } catch (error) {
    console.error("Error updating source:", error);
    throw new Error("Failed to update source");
  }
};

export const deleteSource = async (sourceId: string) => {
  try {
    const [deletedSource] = await db
      .delete(sourcesTable)
      .where(eq(sourcesTable.id, sourceId))
      .returning();

    return deletedSource;
  } catch (error) {
    console.error("Error deleting source:", error);
    throw new Error("Failed to delete source");
  }
};
```

#### Vector Storage

For vector storage using Supabase's vector extension:

```ts
import { pgTable, text, timestamp, uuid, vector } from "drizzle-orm/pg-core";

export const embeddingsTable = pgTable("embeddings", {
  id: uuid("id").defaultRandom().primaryKey(),
  userId: text("user_id").notNull(),
  content: text("content").notNull(),
  embedding: vector("embedding", { dimensions: 1536 }).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at")
    .defaultNow()
    .notNull()
    .$onUpdate(() => new Date()),
});

export type InsertEmbedding = typeof embeddingsTable.$inferInsert;
export type SelectEmbedding = typeof embeddingsTable.$inferSelect;
```

### Auth Rules

Follow these rules when working on auth.

It uses Clerk for authentication and authorization.

#### General Rules

- Use Clerk for user authentication and session management
- Use `getAuth` from `@clerk/nextjs/server` in API routes
- Always verify authentication before accessing resources

```ts
import { getAuth } from "@clerk/nextjs/server";

// In API routes
const { userId } = getAuth(req);

if (!userId) {
  return res.status(401).json({
    success: false,
    message: "Unauthorized",
    data: null,
  });
}
```

#### Authorization

- Always check user permissions before allowing access to resources
- Implement company-level access control

Example of checking company access:

```ts
// Check if user belongs to company before allowing access
const user = await checkUserBelongsToCompany(userId, companyId);

if (!user) {
  return res.status(401).json({
    success: false,
    message: "Unauthorized",
    data: null,
  });
}
```

#### Authentication Flow

- Use Clerk's components and hooks for sign-up, sign-in, and sign-out functionality
- Handle authentication state with Clerk's providers

Example of a middleware for authentication:

```ts
// middleware.ts
import { getAuth } from "@clerk/nextjs/server";
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export async function middleware(req: NextRequest) {
  const { userId } = getAuth(req);
  const isAuth = !!userId;

  // If not authenticated and trying to access protected route
  if (!isAuth && req.nextUrl.pathname.startsWith("/protected")) {
    const redirectUrl = new URL("/login", req.url);
    return NextResponse.redirect(redirectUrl);
  }

  return NextResponse.next();
}

export const config = {
  matcher: ["/protected/:path*", "/api/:path*"],
};
```

## Storage Rules

Follow these rules when working with Supabase Storage.

It uses Supabase Storage for file uploads, downloads, and management.

### General Rules

- Always use environment variables for bucket names
- Never hardcode bucket names in the application code
- Always handle file size limits and allowed file types at the application level
- Always implement proper error handling for storage operations
- Use content-type headers when uploading files to ensure proper file handling

### Organization

#### Buckets

- Name buckets in kebab-case: `user-uploads`, `profile-images`
- Create separate buckets for different types of files (e.g., `profile-images`, `documents`, `attachments`)
- Document bucket purposes in a central location
- Set appropriate bucket policies (public/private) based on access requirements
- Implement RLS (Row Level Security) policies for buckets that need user-specific access

#### File Structure

- Organize files in folders based on their purpose and ownership
- Use predictable, collision-resistant naming patterns
- Structure: `{bucket}/{userId}/{purpose}/{filename}`
- Example: `profile-images/123e4567-e89b/avatar/profile.jpg`
- Include timestamps in filenames when version history is important
- Example: `documents/123e4567-e89b/contracts/2024-02-13-contract.pdf`

### File Handling

#### Upload Rules

- Always validate file size before upload
- Implement file type validation using both extension and MIME type
- Generate unique filenames to prevent collisions
- Set appropriate content-type headers
- Handle existing files appropriately (error or upsert)

Example validation:

```ts
const MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB
const ALLOWED_TYPES = ["image/jpeg", "image/png", "image/webp"];

const validateFile = (file: File): boolean => {
  if (file.size > MAX_FILE_SIZE) {
    throw new Error("File size exceeds limit");
  }

  if (!ALLOWED_TYPES.includes(file.type)) {
    throw new Error("File type not allowed");
  }

  return true;
};
```

## Styling Rules

- Prefer padding over margin
- Use Tailwind CSS for styling
- Use toast for messaging

## Code Organization Rules

- Don't use indices for keys
- Don't use flatmap
- Don't use reduce
- Types at the top of the file
- Types above the code
- At top of component have states
- Then hooks and then data we format
- Helper functions and sub components below the main component
- I prefer using padding instead of margin
- Always use anon functions

Example component organization:

```tsx
import { useState, useEffect } from "react";
import { useQuery } from "@tanstack/react-query";
import { toast } from "react-hot-toast";

// Types
type MyComponentProps = {
  id: string;
  name: string;
};

const MyComponent = ({ id, name }: MyComponentProps) => {
  // States
  const [isOpen, setIsOpen] = useState(false);

  // Hooks
  const { data, isLoading } = useQuery({
    queryKey: ["data", id],
    queryFn: () => fetchData(id),
  });

  // Data formatting
  const formattedData = data
    ? data.map((item) => ({
        ...item,
        displayName: item.name.toUpperCase(),
      }))
    : [];

  // Main component render
  return (
    <div className='p-4'>
      <h1>{name}</h1>

      {isLoading ? (
        <Loader />
      ) : (
        <DataList data={formattedData} onItemClick={handleItemClick} />
      )}
    </div>
  );
};

// Helper functions
const handleItemClick = (itemId: string) => {
  setIsOpen(true);
  toast.success("Item selected");
};

// Sub-components
const Loader = () => {
  return <div>Loading...</div>;
};

const DataList = ({ data, onItemClick }) => {
  return (
    <div>
      {data.map((item) => (
        <div key={item.id} onClick={() => onItemClick(item.id)}>
          {item.displayName}
        </div>
      ))}
    </div>
  );
};

export default MyComponent;
```
